name: "Cross-platform Rust build"
description: "Build a Rust project for multiple platforms"

inputs:
  bin:
    description: "Name of the binary to build"
    required: true
  target:
    description: Target triple to build for
    required: true
  cross-version:
    description: Version of cross to use
    required: true
    default: "0.2.5"

runs:
  using: "composite"

  steps:
      - name: Rustup update & install cross bin 
        run: |
          rustup update stable
          curl -sSfL https://github.com/cross-rs/cross/releases/download/v${{ inputs.cross-version }}/cross-x86_64-unknown-linux-musl.tar.gz | sudo tar xzf - -C /usr/local/bin
        shell: bash
      
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Clone cross repo
        run: git clone --depth 1 --branch v${{ inputs.cross-version }} --recursive https://github.com/cross-rs/cross /tmp/cross
        shell: bash
        if: contains(matrix.target, 'darwin') || contains(matrix.target, 'msvc')

      - name: Set up cross docker
        uses: docker/build-push-action@v5
        with:
          context: /tmp/cross/docker
          file: /tmp/cross/docker/cross-toolchains/docker/Dockerfile.${{ matrix.target }}-cross
          build-args: |
            MACOS_SDK_URL=https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
          tags: "${{ matrix.target }}-cross:latest"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: contains(matrix.target, 'darwin') || contains(matrix.target, 'msvc')

      - name: Run cross build
        run: |
          if ${{ contains(matrix.target, 'darwin') || contains(matrix.target, 'msvc') }}; then
            uppercase_target=$(echo "${{ matrix.target }}" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
            export CROSS_TARGET_${uppercase_target}_IMAGE=${{ matrix.target }}-cross
          fi
          cross build --release --bin ${{ inputs.bin }} --target ${{ matrix.target }}
        shell: bash

      - name: Save release to tarball
        run: |
          tar czf ${{ inputs.bin }}.${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release \
            ${{ inputs.bin }}${{ contains(matrix.target, 'windows') && '.exe' || '' }}
        shell: bash

      - name: Upload tarball as GitHub artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.bin }}.${{ matrix.target }}.tar.gz
          path: ${{ inputs.bin }}.${{ matrix.target }}.tar.gz
          if-no-files-found: error

      - name: Create release draft with tarball artifact
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ inputs.bin }}.${{ matrix.target }}.tar.gz
          draft: true
